import { type Schema, type z } from 'zod'

// const createBuilder = () => {
//   return {
//     input:
//   }
// }

type ResolveOptions<TParams = string> = {
  input: TParams
}
type Resolver<TParams> = (opts: ResolveOptions<TParams>) => void
type Query<TParams> = {
  query: (resolver: Resolver<TParams>) => void
}
type ServerResolver = {
  input: (schema: Schema) => {
    // x<T>: Query<T>
    query: <T = z.infer<typeof schema>>(resolver: Resolver<T>) => void
  }
}
export const sFn = {
  input: <TParams extends Schema>(schema: TParams) => {
    return {
      query: (
        resolver: ({ input }: { input: z.infer<typeof schema> }) => void
      ) => {
        return resolver
      },
    }
  },
}

// export const serverFn = (
//   schema: Schema
//   // fn: (input: z.infer<typeof schema>) => void
// ) => {
//   return {
//     input: (schema: Schema) => {
//       const inputx = schema.parse({})
//
//       return {
//         query: (fn: (input: typeof inputx) => void) => {
//           return fn
//         },
//       }
//     },
//     // query: (fn: (input: z.infer<typeof schema>) => void) => {
//     //   return fn
//     // },
//   }
//   // return {
//   //   query:
//   // }
//   // input: (schema: Schema) => {
//   //   return schema.parse({})
//   // },
//   // query: (fn: (params) => void) => {
//   //   try {
//   //   } catch (error) {}
//   // },
// }
