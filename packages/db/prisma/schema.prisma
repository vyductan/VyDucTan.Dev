generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "../zod"
  relationModel         = true
  modelCase             = "PascalCase"
  modelSuffix           = "Model"
  useDecimalJs          = true
  // imports               = null
  prismaJsonNullability = true
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
}

model Project {
  id        String        @id @default(cuid())
  name      String
  tasks     ProjectTask[]
  todos     Todo[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model ProjectTask {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  statusId  String
  status    ProjectStatus @relation(fields: [id], references: [id])
  projectId String
  project   Project       @relation(fields: [id], references: [id], map: "ProjectTask_project_fk")

  @@index([id])
}

model ProjectStatus {
  id        String        @id @default(cuid())
  name      String
  tasks     ProjectTask[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  groupId String
  group   ProjectStatusGroup @relation(fields: [id], references: [id])

  @@index([id])
}

model ProjectStatusGroup {
  id         String          @id @default(cuid())
  name       String
  statusList ProjectStatus[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model Todo {
  id          String  @id @default(cuid())
  name        String
  description String?
  isDone      Boolean @default(false)
  boardData   Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  statusId  String
  status    TodoStatus @relation(fields: [id], references: [id])
  projectId String?
  project   Project?   @relation(fields: [id], references: [id], map: "Todo_project_fk")

  @@index([id])
}

model TodoStatus {
  id        String   @id @default(cuid())
  name      String
  todos     Todo[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

model Vocabulary {
  id           String            @id @default(cuid())
  vocabulary   String
  form         WordForm?
  level        CEFRLevel?
  ipa          String?
  meaning      String?
  vietnamese   String
  mastery      VocabularyMastery
  lastReviewed DateTime          @default(now())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

enum WordForm {
  N
  V
  ADJ
  ADV
}

enum CEFRLevel {
  A1
  A2
  B1
  B2
  C1
  C2
}

enum VocabularyMastery {
  Poor
  Average
  Good
  Master
  Challenge
}
